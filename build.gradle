project.ext {
	nibiruId = 'oauth'
	nibiruAsyncVersion = '1.0.0'
	guavaVersion = '20.0'
	guavaVersion = '20.0'
	gwtVersion = '2.8.0'
	androidVersion = '4.0.1.2'
	daggerVersion = '2.7'
}

allprojects {
	version = '1.0.0'
	group = 'io.github.nibiruos.oauth'

	repositories {
	    mavenCentral()
	    jcenter()
		maven {
			url "https://oss.sonatype.org/content/groups/staging/"
		}
	    maven {
	        url "https://oss.sonatype.org/content/repositories/snapshots/"
	    }
	    maven {
	        url "https://oss.sonatype.org/content/repositories/google-snapshots/"
	    }
		mavenLocal()
	}
	buildscript {
    	repositories {
        	mavenCentral()
    	}
    	dependencies {
	        classpath 'me.tatarka:gradle-retrolambda:3.3.0-beta4'
	    }
	}
}

subprojects {
	apply plugin: 'eclipse'
	apply plugin: 'java'
	apply plugin: 'maven'
	apply plugin: 'maven-publish'
	apply plugin: 'signing'

	task javadocJar(type: Jar, dependsOn: javadoc) {
		classifier = 'javadoc'
		from javadoc.destinationDir
	}

	task sourcesJar(type: Jar, dependsOn: classes) {
		classifier = 'sources'
		from sourceSets.main.allSource
	}

	publishing {
		publications {
			mavenJava(MavenPublication) {
				from components.java
				artifact sourcesJar
				artifact javadocJar
				pom {
					name = 'Nibiru ' + project.name
					description = 'OAuth integration components for mobile'
					url = 'https://github.com/NibiruOS/' + nibiruId + '/tree/master/' + project.name
					licenses {
						license {
							name = 'The Apache Software License, Version 2.0'
							url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
						}
					}
					developers {
						developer {
							id = 'lbrasseur'
							name = 'Lautaro Brasseur'
							email = 'lbrasseur@gmail.com'
						}
					}
					scm {
						connection = 'https://github.com/NibiruOS/' + nibiruId + '.git'
						developerConnection = 'https://github.com/NibiruOS/' + nibiruId + '.git'
						url = 'https://github.com/NibiruOS/' + nibiruId
					}
				}
			}
		}
		repositories {
			maven {
				credentials {
					username = sonatypeUser
					password = sonatypePassword
				}
				url version.endsWith('SNAPSHOT') ? 'https://oss.sonatype.org/content/repositories/snapshots' : 'https://oss.sonatype.org/service/local/staging/deploy/maven2'
			}
		}
	}

	signing {
		sign publishing.publications.mavenJava
	}

	sourceCompatibility = 1.8

	configurations {
	    provided
	}

	sourceSets {
	    main {
	        compileClasspath += configurations.provided
	    }
	}

	dependencies {
		testCompile "junit:junit:4.12"
		compile "com.google.dagger:dagger:${daggerVersion}"
		provided "com.google.dagger:dagger-compiler:${daggerVersion}"
	}
}